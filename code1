import java.text.DecimalFormat;
import java.util.*;
import java.util.regex.*;

public class ShamirSecretSharing {

    // Decode value from a given base
    public static long decodeValue(int base, String value) {
        return Long.parseLong(value, base);
    }

    // Perform Lagrange interpolation to find the constant term of the polynomial
    public static double lagrangeInterpolation(List<long[]> points) {
        int n = points.size();
        double constantTerm = 0.0;

        for (int i = 0; i < n; i++) {
            long xi = points.get(i)[0];
            long yi = points.get(i)[1];
            double term = yi;

            for (int j = 0; j < n; j++) {
                if (i != j) {
                    long xj = points.get(j)[0];
                    term *= (0.0 - xj) / (xi - xj);  // We are looking for f(0), so x = 0
                }
            }
            constantTerm += term;
        }

        return constantTerm;
    }

    // Parse JSON input and extract key-value pairs
    public static Map<String, String> parseJson(String json) {
        Map<String, String> map = new HashMap<>();
        Pattern pattern = Pattern.compile("\"(\\d+)\":\\s*\\{\\s*\"base\":\\s*\"(\\d+)\",\\s*\"value\":\\s*\"(\\w+)\"\\s*\\}");
        Matcher matcher = pattern.matcher(json);

        while (matcher.find()) {
            String key = matcher.group(1);
            String base = matcher.group(2);
            String value = matcher.group(3);
            map.put(key, base + "," + value);
        }

        return map;
    }

    public static void main(String[] args) {
        String jsonInput = "{\n" +
                "    \"keys\": {\n" +
                "        \"n\": 9,\n" +
                "        \"k\": 6\n" +
                "    },\n" +
                "    \"1\": {\n" +
                "        \"base\": \"10\",\n" +
                "        \"value\": \"28735619723837\"\n" +
                "    },\n" +
                "    \"2\": {\n" +
                "        \"base\": \"16\",\n" +
                "        \"value\": \"1A228867F0CA\"\n" +
                "    },\n" +
                "    \"3\": {\n" +
                "        \"base\": \"12\",\n" +
                "        \"value\": \"32811A4AA0B7B\"\n" +
                "    },\n" +
                "    \"4\": {\n" +
                "        \"base\": \"11\",\n" +
                "        \"value\": \"917978721331A\"\n" +
                "    },\n" +
                "    \"5\": {\n" +
                "        \"base\": \"16\",\n" +
                "        \"value\": \"1A22886782E1\"\n" +
                "    },\n" +
                "    \"6\": {\n" +
                "        \"base\": \"10\",\n" +
                "        \"value\": \"28735619654702\"\n" +
                "    },\n" +
                "    \"7\": {\n" +
                "        \"base\": \"14\",\n" +
                "        \"value\": \"71AB5070CC4B\"\n" +
                "    },\n" +
                "    \"8\": {\n" +
                "        \"base\": \"9\",\n" +
                "        \"value\": \"122662581541670\"\n" +
                "    },\n" +
                "    \"9\": {\n" +
                "        \"base\": \"8\",\n" +
                "        \"value\": \"642121030037605\"\n" +
                "    }\n" +
                "}";

        // Parse JSON input to extract key-value pairs
        Map<String, String> jsonMap = parseJson(jsonInput);

        int n = 9; // Number of provided points
        int k = 6; // Minimum number of points required to solve the polynomial

        // Collect points from the parsed data
        List<long[]> points = new ArrayList<>();
        for (Map.Entry<String, String> entry : jsonMap.entrySet()) {
            if (!entry.getKey().equals("keys")) {
                long x = Long.parseLong(entry.getKey());  // x is the key itself
                String[] values = entry.getValue().split(",");
                int base = Integer.parseInt(values[0]);
                String value = values[1];
                long y = decodeValue(base, value);  // Decode y value
                points.add(new long[]{x, y});
            }
        }

        // Use a subset of points for interpolation
        List<long[]> interpolationPoints = points.subList(0, k);

        // Perform Lagrange interpolation to find the constant term
        double constantC = lagrangeInterpolation(interpolationPoints);

        // Format and print the result
        DecimalFormat df = new DecimalFormat("#");
        df.setMaximumFractionDigits(340); // Set this to a high number to ensure no scientific notation
        String formattedConstantC = df.format(constantC);

        System.out.println(formattedConstantC);
    }
}
